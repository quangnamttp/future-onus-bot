const axios = require('axios');
const dayjs = require('dayjs');
require('dayjs/locale/vi');
dayjs.locale('vi');

const { users } = require('../config.json');

const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;

// D·ªãch t√™n s·ª± ki·ªán sang ti·∫øng Vi·ªát
function translateIndicator(name) {
  const translations = {
    'Core CPI': 'CPI l√µi',
    'CPI': 'Ch·ªâ s·ªë gi√° ti√™u d√πng',
    'Fed Interest Rate Decision': 'Quy·∫øt ƒë·ªãnh l√£i su·∫•t c·ªßa Fed',
    'Interest Rate Decision': 'Quy·∫øt ƒë·ªãnh l√£i su·∫•t',
    'Unemployment Rate': 'T·ª∑ l·ªá th·∫•t nghi·ªáp',
    'Nonfarm Payrolls': 'B·∫£ng l∆∞∆°ng phi n√¥ng nghi·ªáp',
    'Retail Sales': 'Doanh s·ªë b√°n l·∫ª',
    'GDP': 'T·ªïng s·∫£n ph·∫©m qu·ªëc n·ªôi',
    'PPI': 'Ch·ªâ s·ªë gi√° s·∫£n xu·∫•t',
    'Initial Jobless Claims': 'ƒê∆°n xin tr·ª£ c·∫•p th·∫•t nghi·ªáp l·∫ßn ƒë·∫ßu',
    'Trade Balance': 'C√°n c√¢n th∆∞∆°ng m·∫°i',
    'ISM Manufacturing PMI': 'Ch·ªâ s·ªë PMI s·∫£n xu·∫•t ISM',
    'Bitcoin ETF': 'ETF Bitcoin',
    'Crypto Regulation': 'Quy ƒë·ªãnh ti·ªÅn m√£ h√≥a',
  };

  for (const [key, val] of Object.entries(translations)) {
    if (name.toLowerCase().includes(key.toLowerCase())) return val;
  }

  return name;
}

// Chuy·ªÉn m·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng sang ti·∫øng Vi·ªát
function mapImpactLevel(impactRaw) {
  const map = {
    'high': 'Cao',
    'very high': 'R·∫•t cao',
    'medium': 'Trung b√¨nh',
    'low': 'Th·∫•p'
  };
  return map[impactRaw.toLowerCase()] || impactRaw;
}

// G·∫Øn c·ªù qu·ªëc gia
function getFlag(country) {
  const flags = {
    'M·ªπ': 'üá∫üá∏',
    'Anh': 'üá¨üáß',
    'ƒê·ª©c': 'üá©üá™',
    'Ph√°p': 'üá´üá∑',
    '√ù': 'üáÆüáπ',
    'Canada': 'üá®üá¶',
    'Trung Qu·ªëc': 'üá®üá≥',
    'Nh·∫≠t B·∫£n': 'üáØüáµ',
    '√öc': 'üá¶üá∫',
    'New Zealand': 'üá≥üáø',
    'Khu v·ª±c Euro': 'üá™üá∫',
  };
  return flags[country] || '';
}

// Nh·∫≠n di·ªán tin li√™n quan Crypto
function isCryptoRelated(nameRaw) {
  return /(crypto|bitcoin|ethereum|blockchain|etf|fed|interest rate|cpi|inflation|gdp|unemployment)/i.test(nameRaw);
}

// Ph√¢n t√≠ch
function analyzeImpact(actual, forecast) {
  if (!actual || !forecast || actual === '‚Äì' || forecast === '‚Äì') {
    return 'Ph√¢n t√≠ch: Ch·ªâ s·ªë ch∆∞a ƒë∆∞·ª£c c√¥ng b·ªë ‚Üí ch·ªù c·∫≠p nh·∫≠t sau.';
  }

  const a = parseFloat(actual.replace('%', '').replace(',', ''));
  const f = parseFloat(forecast.replace('%', '').replace(',', ''));

  if (isNaN(a) || isNaN(f)) return '';

  const diff = a - f;
  if (diff > 0) return 'Ph√¢n t√≠ch: Ch·ªâ s·ªë cao h∆°n d·ª± b√°o ‚Üí kh·∫£ nƒÉng t√≠ch c·ª±c ƒë·∫øn th·ªã tr∆∞·ªùng.';
  if (diff < 0) return 'Ph√¢n t√≠ch: Ch·ªâ s·ªë th·∫•p h∆°n d·ª± b√°o ‚Üí kh·∫£ nƒÉng ti√™u c·ª±c ƒë·∫øn th·ªã tr∆∞·ªùng.';
  return 'Ph√¢n t√≠ch: ƒê√∫ng b·∫±ng d·ª± b√°o ‚Üí ph·∫£n ·ª©ng th·ªã tr∆∞·ªùng c√≥ th·ªÉ trung l·∫≠p.';
}

// ƒê·ªãnh d·∫°ng tin nh·∫Øn
function formatMarketNews(newsList, dateStr) {
  if (!newsList || newsList.length === 0) {
    return [`üóìÔ∏è *${dateStr}*\nH√¥m nay kh√¥ng c√≥ s·ª± ki·ªán kinh t·∫ø quan tr·ªçng n√†o. Ch√∫c b·∫°n m·ªôt ng√†y giao d·ªãch hi·ªáu qu·∫£!`];
  }

  let messages = [];
  let currentMessage = `üóìÔ∏è *${dateStr}*\nüìä *Th·ªã tr∆∞·ªùng h√¥m nay c√≥ c√°c s·ª± ki·ªán kinh t·∫ø ƒë√°ng ch√∫ √Ω:*\n\n`;

  newsList.forEach(news => {
    const cryptoTag = news.isCrypto ? 'üî• ' : '';
    let block = `${cryptoTag}${news.countryFlag} **${news.time} ‚Äì ${news.title}**\n`;
    block += `**üí• T√°c ƒë·ªông: ${news.impact}**\n`;
    block += `Th·ª±c t·∫ø: ${news.actual || '‚Äì'} | D·ª± b√°o: ${news.forecast || '‚Äì'} | Tr∆∞·ªõc ƒë√≥: ${news.previous || '‚Äì'}\n`;
    block += `${analyzeImpact(news.actual, news.forecast)}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;

    if ((currentMessage + block).length > 1800) {
      messages.push(currentMessage);
      currentMessage = block;
    } else {
      currentMessage += block;
    }
  });

  if (currentMessage) {
    currentMessage += `\n*Bot g·ª≠i l√∫c 07:00 ‚Äì C·∫≠p nh·∫≠t t·ª± ƒë·ªông.*`;
    messages.push(currentMessage.trim());
  }

  return messages;
}

// G·ª≠i tin nh·∫Øn Messenger
async function callSendAPI(sender_psid, response) {
  try {
    await axios.post(
      `https://graph.facebook.com/v19.0/me/messages?access_token=${PAGE_ACCESS_TOKEN}`,
      {
        recipient: { id: sender_psid },
        message: response
      }
    );
    console.log(`[MarketNews] ‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn ƒë·∫øn ${sender_psid}`);
  } catch (err) {
    console.error('[MarketNews] ‚ùå G·ª≠i tin nh·∫Øn th·∫•t b·∫°i:', err.response?.data || err.message);
  }
}

// G·ªçi ch√≠nh
async function fetchMarketNews() {
  try {
    const today = dayjs().format('YYYY-MM-DD');
    const response = await axios.get(`https://financialmodelingprep.com/api/v3/economic_calendar?from=${today}&to=${today}`);
    const data = response.data;

    const news = [];

    for (const item of data) {
      const impact = mapImpactLevel(item.impact || '');
      const country = item.country || '';
      const nameRaw = item.event || '';
      const name = translateIndicator(nameRaw);
      const actual = item.actual || '‚Äì';
      const forecast = item.forecast || '‚Äì';
      const previous = item.previous || '‚Äì';
      const time = item.date.slice(11, 16); // format HH:mm

      if (!['Cao', 'R·∫•t cao'].includes(impact) && !isCryptoRelated(nameRaw)) continue;

      news.push({
        country,
        time,
        title: name,
        impact,
        actual,
        forecast,
        previous,
        rawTitle: nameRaw,
        countryFlag: getFlag(country),
        isCrypto: isCryptoRelated(nameRaw),
      });
    }

    const dateStr = `${dayjs().format('dddd')}, ${dayjs().format('DD/MM/YYYY')}`;
    const messages = formatMarketNews(news, dateStr);

    for (const uid of Object.keys(users)) {
      for (const msg of messages) {
        await callSendAPI(uid, { text: msg });
      }
    }
  } catch (err) {
    console.error('[MarketNews] L·ªói khi l·∫•y d·ªØ li·ªáu:', err.message);
  }
}

module.exports = { fetchMarketNews };
